"""
Django settings for core project.

Generated by 'django-admin startproject' using Django 4.2.7.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
#  fire base storage

FIREBASE_STORAGE_BUCKET = "music-app-84798.appspot.com"
FIREBASE_SERVICE_ACCOUNT_KEY = 'music-app-84798-firebase-adminsdk-thx4k-66896e648f.json'
FIREBASE_SERVICE_ACCOUNT_KEY_PATH =   BASE_DIR / FIREBASE_SERVICE_ACCOUNT_KEY
import firebase_admin
from firebase_admin import credentials
import base64
import json ,os

def decode_google_credentials(encoded_string):
    try:
        # Add padding if needed
        padding = '=' * (len(encoded_string) % 4)
        padded_encoded_string = encoded_string + padding

        # Decode the base64 string
        decoded_bytes = base64.b64decode(padded_encoded_string)

        # Try decoding with UTF-8
        try:
            decoded_string = decoded_bytes.decode('utf-8')
        except UnicodeDecodeError:
            # If UTF-8 decoding fails, try with 'latin-1'
            decoded_string = decoded_bytes.decode('latin-1', errors='replace')

        return decoded_string
    except Exception as e:
        # Handle other exceptions
        print(f"Error decoding base64: {e}")
        return None
  
encoded_credentials = os.environ["GOOGLE_APPLICATION_CREDENTIALS"]
decoded_credentials = decode_google_credentials(encoded_string=encoded_credentials)
cred = credentials.Certificate(str(FIREBASE_SERVICE_ACCOUNT_KEY_PATH))  
firebase_admin.initialize_app(cred, {'storageBucket': FIREBASE_STORAGE_BUCKET})

GS_BUCKET_NAME = FIREBASE_STORAGE_BUCKET
GS_DEFAULT_ACL = 'publicRead'  # Set the appropriate ACL for your needs
GS_FILE_OVERWRITE = False
GS_QUERYSTRING_AUTH = False

GS_CUSTOM_DOMAIN = f'{GS_BUCKET_NAME}.storage.googleapis.com'

# Use Google Cloud Storage as the default storage backend
DEFAULT_FILE_STORAGE = 'storages.backends.gcloud.GoogleCloudStorage'

# Set the media URL to the custom domain if available, otherwise use the default
MEDIA_URL = f'https://{GS_CUSTOM_DOMAIN}/' if GS_CUSTOM_DOMAIN else f'https://storage.googleapis.com/{GS_BUCKET_NAME}/'
# Use the Google Cloud Storage backend for Django storage
DEFAULT_FILE_STORAGE = 'storages.backends.gcloud.GoogleCloudStorage'


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-40^@@k4mymdr@k+k#$+kka-!$td2msjl)((%70p%^*r#_i#(nc'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ["*"]


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    "music",
    "authentication",
    'widget_tweaks',
    'django_filters',
]


MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'core.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'core.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.sqlite3',
#         'NAME': BASE_DIR / 'db.sqlite3',
#     }
# }

import dj_database_url
DATABASES = {
    'default': dj_database_url.config(default="postgres://default:0qe8HQNRiwJp@ep-aged-silence-54497879-pooler.us-east-1.postgres.vercel-storage.com:5432/verceldb")
}
LOGIN_URL = 'login'  # Set this to the URL of your login view
LOGOUT_URL = 'logout'  # Set this to the URL of your logout view
LOGIN_REDIRECT_URL = '/'  # Set this to the URL where users should be redirected after login
# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = '/static/'
STATICFILES_DIRS = [
    BASE_DIR / "static",
]
import os
STATIC_ROOT =os.path.join(BASE_DIR,"staticfiles_build","static")

# MEDIA_URL = '/media/'
# MEDIA_ROOT = BASE_DIR / "media"
# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
